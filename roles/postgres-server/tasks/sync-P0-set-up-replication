#!/usr/bin/env bash
set -e

<%
  master = node.zone_leader(role)
  slaves = master.zone_peers.with(role: role)

  clients = node.zone_peers.with(role: 'postgres-client')
  servers = node.zone_peers.with(role: 'postgres-server')
%>

PG_VERSION=<%= node.definition['pg_version'].q %>
PGDATA=/var/lib/postgresql/$PG_VERSION/main
RECOVERY_CONF="$PGDATA/recovery.conf"
PGETC=/etc/postgresql/$PG_VERSION/main

cat - <<DYNAMIC_CONF | sudo tee "$PGETC/dynamic.conf"
# I am a <%= node == master ? 'master' : 'slave' %>
wal_sender_timeout = 15s
wal_receiver_timeout = 60s
max_standby_streaming_delay = 30s
max_standby_archive_delay = 60s
hot_standby = on
hot_standby_feedback = on
DYNAMIC_CONF

# Yet again: Fuck postgresql's permission checks.
eval $(sudo -i -u postgres pg-auth postgres-server)

<% if node == master %>

  # This means we were a slave, and have now been mastered.
  if sudo test -f "$RECOVERY_CONF" ; then
    echo " *** I have been promoted: assuming master. *** "

    sudo rm -f "$RECOVERY_CONF"
    sudo systemctl restart postgresql
  fi

<% else %>

cat - <<RECOVERY_CONF | sudo tee "$RECOVERY_CONF"
# Generated in: <%= __FILE__ %>
standby_mode = on
primary_conninfo = 'application_name=<%= node.name %> host=<%= master.addr_from(node) %> user=replication sslmode=$PGSSLMODE sslrootcert=$PGSSLROOTCERT sslcert=$PGSSLCERT sslkey=$PGSSLKEY'
recovery_target_timeline = 'latest'
RECOVERY_CONF

<% end %>

<% if node == master %>
  echo '<%= node.name %>: i am the master'
  sudo rm -f '/var/lib/postgresql/empty-cluster'
<% end %>

sudo systemctl reload postgresql || sudo systemctl start postgresql
