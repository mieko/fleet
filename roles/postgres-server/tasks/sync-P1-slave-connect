#!/usr/bin/env bash
set -e

<%
  master = node.zone_leader(role)
%>

PG_VERSION=<%= node.definition['pg_version'].q %>
PGDATA=/var/lib/postgresql/$PG_VERSION/main
RECOVERY_CONF="$PGDATA/recovery.conf"
MAX_RETRIES=10

echo "PGDATA IS $PGDATA"

<% if node != master %>
  if [ -f '/var/lib/postgresql/empty-cluster' ] ; then
    echo "Was an empty cluster.  Removing to prep for pg_basebackup"

    echo "stopping postgresql"
    sudo systemctl stop postgresql

    while sudo ps aux | grep -v grep | grep -v cult | grep -q 'postgres\|pg_ctl' ; do
      sleep 1
    done

    eval $(sudo -i -u postgres pg-auth postgres-server)

    sudo cp "$RECOVERY_CONF" /tmp/pg-recovery-conf
    for i in $(seq 1 $MAX_RETRIES) ; do
      sudo bash -c "rm -rf $PGDATA/*"
      sudo -u postgres \
        pg_basebackup \
          --xlog \
          --pgdata "$PGDATA" \
          --username replication \
          --no-password \
          -d "host=<%= master.addr_from(node).q %> user=replication sslmode=$PGSSLMODE sslrootcert=$PGSSLROOTCERT sslcert=$PGSSLCERT sslkey=$PGSSLKEY" \
          --host <%= master.addr_from(node).q %> \
          --label "initial sync to <%= node.name.sq %>" \
          --pgdata "$PGDATA" && break
     if [[ "$i" -eq "$MAX_RETRIES" ]]; then
       echo "Giving up."
       exit 1
     fi

     echo "pg_basebackup wasn't cool.  Thats normal with a herd."
     echo "Sleeping then trying again..."
     sleep $(( $i * 2 + $RANDOM % 5))
   done
   echo "Successfully got backup."

   sudo rm -f '/var/lib/postgresql/empty-cluster'
   sudo mv /tmp/pg-recovery-conf "$RECOVERY_CONF"
   sudo systemctl start postgresql
  else
    echo "Not an empty cluster.  Keeping."
    exit 0
  fi
<% end %>
